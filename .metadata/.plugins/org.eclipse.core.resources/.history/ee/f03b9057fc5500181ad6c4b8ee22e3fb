package com.homeaway.places.services;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.homeaway.places.entities.Request.GooglePlacesRequest;
import com.homeaway.places.entities.Request.LatLong;
import com.homeaway.places.entities.Response.GooglePlacesResponse;

public class GooglePlacesService {

	public HttpResponse StorePlacesInDB(GooglePlacesRequest gpRequest) {
		List<GooglePlacesResponse> gpResponses = new ArrayList<GooglePlacesResponse>();
		for (LatLong latLong : gpRequest.getlatLong()) {
			for (String place : gpRequest.getPlaces()) {

				String requestUri = String.format(Strings.getGoolePlacesApiUri(), latLong.getLatitude(),
						latLong.getLongitude(), gpRequest.getRadius(), place, Strings.getApiKey());
				boolean nextPage = false;
				boolean invalidStatus = false;

				do {
					try {
						HttpClient client = HttpClientBuilder.create().build();
						HttpGet request = new HttpGet(requestUri);
						HttpResponse response;
						response = client.execute(request);
						BufferedReader rd = new BufferedReader(
								new InputStreamReader(response.getEntity().getContent()));

						StringBuffer result = new StringBuffer();
						String line = "";
						while ((line = rd.readLine()) != null) {
							result.append(line);
						}
						ObjectMapper objectMapper = new ObjectMapper();
						GooglePlacesResponse gpRes = objectMapper.readValue(result.toString(),
								GooglePlacesResponse.class);
						invalidStatus = gpRes.getStatus().trim().equals("INVALID_REQUEST");
						if (!invalidStatus)
							gpResponses.add(gpRes);
						nextPage = (gpRes.getNext_page_token() != null && !gpRes.getNext_page_token().isEmpty());
						if (nextPage) {
							requestUri = String.format(Strings.getGooglePlacesNextPageUri(), gpRes.getNext_page_token(),
									Strings.getApiKey());
						}
					} catch (Exception ex) {
						System.out.println("Exception : " + ex.getMessage());
					}
				} while (nextPage || invalidStatus);
			}
		}
	}
	
	private GooglePlacesResposne GetPlacesFromGoogleApi(String requestUri)
	{
		HttpClient client = HttpClientBuilder.create().build();
		HttpGet request = new HttpGet(requestUri);
		HttpResponse response;
		response = client.execute(request);
		BufferedReader rd = new BufferedReader(
				new InputStreamReader(response.getEntity().getContent()));

		StringBuffer result = new StringBuffer();
		String line = "";
		while ((line = rd.readLine()) != null) {
			result.append(line);
		}
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.readValue(result.toString(),
				                       GooglePlacesResponse.class);
	}
}
