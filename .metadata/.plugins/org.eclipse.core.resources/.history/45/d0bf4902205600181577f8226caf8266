package com.homeaway.places.controllers;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.homeaway.places.entities.Request.GooglePlacesRequest;
import com.homeaway.places.entities.Request.LatLong;
import com.homeaway.places.entities.Response.GooglePlacesResponse;
import com.homeaway.places.services.GooglePlacesService;
import com.homeaway.places.services.Strings;

@RestController
@RequestMapping("/googleplaces")
public class GooglePlaces {

	@PostMapping
	public ResponseEntity<HttpStatus> GetPlacesFromGoogleApi(@RequestBody GooglePlacesRequest gpRequest) {
		
		final String apiKey = "AIzaSyAwphgQvEwLuwczfBNgsz2IQy91HHB4LDE";
		 String goolePlacesApiUri = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=%1s,%2s&radius=%3s&type=%4s&key=%5s";
		String googlePlacesNextPageUri = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?pagetoken=%1s&key=%2s";

		 //return new GooglePlacesService().StorePlacesInDB(gpRequest);
		List<GooglePlacesResponse> gpResponses = new ArrayList<GooglePlacesResponse>();
		for (LatLong latLong : gpRequest.getlatLong()) {
			for (String place : gpRequest.getPlaces()) {

				String requestUri = String.format(goolePlacesApiUri, latLong.getLatitude(),
						latLong.getLongitude(), gpRequest.getRadius(), place, apiKey);
				boolean nextPage = false;
				boolean invalidStatus = false;
				boolean firstPage = true;

				do {
					try
					{
						System.setProperty("https.protocols", "TLSv1,TLSv1.1,TLSv1.2");
						HttpClient client = HttpClientBuilder.create().build();
						HttpGet request = new HttpGet(requestUri);
						HttpResponse response;
						response = client.execute(request);
						BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

						StringBuffer result = new StringBuffer();
						String line = "";
						while ((line = rd.readLine()) != null) {
							result.append(line);
						}
						System.out.println("result : "+result);
						ObjectMapper objectMapper = new ObjectMapper();
						GooglePlacesResponse gpRes = objectMapper.readValue(result.toString(), GooglePlacesResponse.class);
					
					invalidStatus = gpRes.getStatus().trim().equals("INVALID_REQUEST");
					if (!invalidStatus)
						gpResponses.add(gpRes);
					if (gpRes.getNext_page_token() != null && !gpRes.getNext_page_token().isEmpty())
					{
					    nextPage = true;
					    firstPage = false;
						requestUri = String.format(googlePlacesNextPageUri, gpRes.getNext_page_token(),
								apiKey);
					}
					} catch (Exception ex) {
						System.out.println("Exception : " + ex.getMessage().toString());
						
					}
					System.out.println("in loop");
				} while (nextPage || (invalidStatus && !firstPage));
			}
		}
		return ResponseEntity.status(HttpStatus.CREATED).body(HttpStatus.CREATED);
	}

}
